<script lang="ts">
    import { onMount } from 'svelte';
    import { history } from '$lib/stores/historyStore';
    import { showTitlebar } from '$lib/stores/uiStore';
    import { loadHistory, useFromHistory, removeFromHistory, truncate, formatDate, clearAllHistory, ClipboardService } from '$lib/api/clipboard';
    import { keybinds, loadKeybindsFromBackend, matchKeybind } from '$lib/api/keybinds';
    import { get } from 'svelte/store';
    import { listen } from '@tauri-apps/api/event';

    let selectedIndex = $state(-1);
    let historyContainer: HTMLElement | null = $state(null);
    let unlisten = $state();
    let contentCache = $state<Map<string, number[]>>(new Map());

    async function loadEntryContent(entryId: string): Promise<number[]> {
        if (contentCache.has(entryId)) {
            return contentCache.get(entryId)!;
        }
        
        try {
            const content = await ClipboardService.getClipboardEntryContent(entryId);
            contentCache.set(entryId, content);
            return content;
        } catch (error) {
            console.error('Failed to load content:', error);
            return [];
        }
    }

    function scrollToSelected() {
        if (historyContainer && selectedIndex >= 0) {
            const selectedItem = historyContainer.querySelector(`[data-index="${selectedIndex}"]`) as HTMLElement;
            if (selectedItem) {
                selectedItem.scrollIntoView({
                    behavior: 'smooth',
                    block: 'nearest',
                    inline: 'nearest'
                });
            }
        }
    }

    function handleKeyDown(event: KeyboardEvent) {
        const kb = get(keybinds);
        const previousIndex = selectedIndex;

        if (matchKeybind(event, kb.historyUp)) {
            selectedIndex = Math.max(selectedIndex - 1, 0);
            event.preventDefault();
        } else if (matchKeybind(event, kb.historyDown)) {
            selectedIndex = Math.min(selectedIndex + 1, $history.length - 1);
            event.preventDefault();
        } else if (matchKeybind(event, kb.useEntry) && selectedIndex >= 0) {
            useFromHistory($history[selectedIndex]);
            event.preventDefault();
        } else if (matchKeybind(event, kb.removeEntry) && selectedIndex >= 0) {
            removeFromHistory($history[selectedIndex]);
            selectedIndex = Math.min(selectedIndex, $history.length - 2);
            event.preventDefault();
        } else if (matchKeybind(event, kb.deleteAll)) {
            clearAllHistory();
            selectedIndex = -1;
            event.preventDefault();
        }

        if (selectedIndex !== previousIndex) {
            setTimeout(scrollToSelected, 0);
        }
    }

    function isImage(contentType: string): boolean {
        return contentType.startsWith('image/');
    }

    function getImageDataUrl(content: number[], contentType: string): string {
        const uint8Array = new Uint8Array(content);
        const base64 = btoa(String.fromCharCode(...uint8Array));
        return `data:${contentType};base64,${base64}`;
    }

    function getTextContent(content: number[]): string {
        const uint8Array = new Uint8Array(content);
        const decoder = new TextDecoder('utf-8');
        return decoder.decode(uint8Array);
    }

    onMount(() => {
        loadKeybindsFromBackend();
        loadHistory();
        if ($history.length > 0 && selectedIndex == -1) {
          selectedIndex = 0;
          setTimeout(scrollToSelected, 0);
        }
        
        unlisten = listen<string>('history-updated', () => {
            loadHistory();
            contentCache.clear(); // Clear cache when history updates
        });
    });
</script>

<svelte:window onkeydown={handleKeyDown} />

{#if $history.length === 0}
    <div class="empty">
      <p class="empty-txt">No clipboard history yet. Copy something to get started!</p>
    </div>
{:else}  
    <div class="history-list" bind:this={historyContainer}>
        {#each $history as entry, i (entry.id)}
            <div 
                class="history-item {selectedIndex === i ? 'selected' : ''}" 
                data-index={i} 
                role="button" 
                tabindex="0" 
                onclick={() => { selectedIndex = i; scrollToSelected(); }}
                onkeydown={(e) => {
                    if (e.key === 'Enter' || e.key === ' ') {
                        if (selectedIndex >= 0) {
                          useFromHistory($history[selectedIndex]);
                        }
                        e.preventDefault();
                    }
                }}
            >
                <div class="content">
                    {#if isImage(entry.content_type)}
                        {#await loadEntryContent(entry.id)}
                            <div class="image-preview loading">
                                <span>Loading image...</span>
                            </div>
                        {:then content}
                            <div class="image-preview">
                                <img 
                                    src={getImageDataUrl(content, entry.content_type)} 
                                    alt="Clipboard image"
                                />
                            </div>
                        {:catch error}
                            <div class="image-preview error">
                                <span>Failed to load image</span>
                            </div>
                        {/await}
                    {:else}
                        {#await loadEntryContent(entry.id)}
                            <div class="text loading">Loading...</div>
                        {:then content}
                            <div class="text">{truncate(getTextContent(content))}</div>
                        {:catch error}
                            <div class="text error">Failed to load content</div>
                        {/await}
                    {/if}
                    <div class="meta">
                        <span class="date">{formatDate(entry.timestamp)}</span>
                        <span class="type">{entry.content_type}</span>
                    </div>
                </div>
            </div>
        {/each}
    </div>
{/if}

<style>
    .empty {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 100%;
    }

    .empty-txt {
        text-align: center;
        color: var(--text-secondary);
        font-style: italic;
        padding: 20px;
    }

    .history-list {
        display: flex;
        flex-direction: column;
        overflow-y: auto;
        user-select: none;
        -webkit-user-select: none;
        scroll-behavior: smooth;
    }

    .history-list::-webkit-scrollbar {
        width: 0;
    }

    .history-item {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        background: var(--background);
        border-radius: 0px;
        padding: 14px 12px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.08);
        border-style: solid;
        border-color: transparent;
        border-width: 1px 0 1px 0;
        transition: background-color 150ms ease, border-color 150ms ease;
        position: relative;
        outline: none
    }

    .history-item.selected {
        border-color: var(--outline);
        background-color: var(--selected);
    }

    .history-item:hover {
        border-color: var(--outline);
        background-color: var(--hover);
    }

    .history-item:hover.selected {
        border-color: var(--outline);
        background-color: var(--selected);
    }

    .content {
        flex: 1;
        margin-right: 0px;
    }

    .text {
        font-family: monospace;
        padding: 5px 8px;
        color: var(--text-primary);
        border-radius: 3px;
        margin-bottom: 8px;
        word-break: break-all;
    }

    .text.loading,
    .text.error {
        font-style: italic;
        opacity: 0.6;
    }

    .history-item.selected .text {
        color: var(--selected-foreground);
    }

    .image-preview {
        margin-bottom: 8px;
        border-radius: 3px;
        overflow: hidden;
        max-height: 200px;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: var(--background-alt);
    }

    .image-preview.loading,
    .image-preview.error {
        padding: 20px;
        font-style: italic;
        opacity: 0.6;
    }

    .image-preview img {
        max-width: 100%;
        max-height: 200px;
        object-fit: contain;
        display: block;
    }

    .meta {
        display: flex;
        gap: 15px;
        font-size: 0.85em;
        color: var(--text-secondary);
    }

    .history-item.selected .meta {
        color: var(--selected-foreground);
        opacity: 0.8;
    }

    .type {
        border-radius: 3px;
        height: 20px;
        padding: 0 5px;
        font-weight: 500;
        background-color: var(--background-alt);
        color: var(--highlight);
    }

    .history-item.selected .type {
        background-color: rgba(0, 0, 0, 0.2);
        color: var(--selected-foreground);
    }

    @media (max-width: 600px) {
        .history-item {
            flex-direction: column;
            align-items: stretch;
        }
        
        .content {
            margin-right: 0;
            margin-bottom: 10px;
        }
    }
</style>